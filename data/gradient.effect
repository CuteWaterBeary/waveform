uniform float4x4 ViewProj;
uniform float4 color_base = {1.0, 1.0, 1.0, 1.0};
uniform float4 color_crest = {1.0, 1.0, 1.0, 1.0};
uniform float grad_center = 0.0;
uniform float grad_height = 0.0;

uniform float graph_width = 0.0;
uniform float graph_height = 0.0;
uniform float graph_deadzone = 0.0;
uniform bool graph_invert = false;
uniform float2 radial_center = {0.0, 0.0};

struct VertInOut {
	float4 pos : POSITION;
};

struct VertGrad {
	float4 pos : POSITION;
	float2 tex : TEXCOORD0;
};

VertInOut VSSimple(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	return vert_out;
}

VertGrad VSGradient(VertInOut vert_in)
{
	VertGrad vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.tex = vert_in.pos.xy;
	return vert_out;
}

VertGrad VSRadial(VertInOut vert_in)
{
	VertGrad vert_out;
	float angle = saturate(vert_in.pos.x / graph_width) * 6.283185307179586f;
	vert_out.pos = float4(vert_in.pos.xyz, 1.0);
	if(graph_invert)
	{
		vert_out.pos.y = graph_height - vert_out.pos.y;
	}
	vert_out.pos.y += graph_deadzone;
	vert_out.pos.x = -(vert_out.pos.y * sin(angle));
	vert_out.pos.y = vert_out.pos.y * cos(angle);
	vert_out.pos.xy += radial_center;
	vert_out.pos = mul(vert_out.pos, ViewProj);
	vert_out.tex = vert_in.pos.xy;
	return vert_out;
}

float4 PSSolid(VertInOut vert_in) : TARGET
{
	return color_base;
}

float4 PSGradient(VertGrad vert_in) : TARGET
{
    float lerp_t = saturate(distance(vert_in.tex.y, grad_center) / grad_height);
	return lerp(color_base, color_crest, lerp_t);
}

technique Solid
{
	pass
	{
		vertex_shader = VSSimple(vert_in);
		pixel_shader  = PSSolid(vert_in);
	}
}

technique Gradient
{
	pass
	{
		vertex_shader = VSGradient(vert_in);
		pixel_shader  = PSGradient(vert_in);
	}
}

technique Radial
{
	pass
	{
		vertex_shader = VSRadial(vert_in);
		pixel_shader  = PSSolid(vert_in);
	}
}

technique RadialGradient
{
	pass
	{
		vertex_shader = VSRadial(vert_in);
		pixel_shader  = PSGradient(vert_in);
	}
}
